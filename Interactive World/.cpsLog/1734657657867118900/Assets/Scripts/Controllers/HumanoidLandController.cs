using System;
using UnityEngine;

public class HumanoidLandController : MonoBehaviour
{
    Rigidbody _rigidbody;
    [SerializeField] private HumanoidLandInput input;

    private Vector3 _playerMoveInput;
    
    [Header("Movement")]
    [SerializeField] private float movementMultiplier = 30f;

    private void Awake()
    {
        _rigidbody = GetComponent<Rigidbody>();
    }

    private void FixedUpdate()
    {
        _playerMoveInput = GetMoveInput();
        PlayerMove();
        
        _rigidbody.AddRelativeForce(_playerMoveInput, ForceMode.Force);
    }

    private Vector3 PlayerMove()
    {
        return new Vector3(input.MoveInput.x, 0f, input.MoveInput.y);
    }

    private Vector3 GetMoveInput()
    {
        throw new NotImplementedException();
    }
}
